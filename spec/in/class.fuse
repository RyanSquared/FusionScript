using class;

-- basic class --

class Example {
	__init(a = 5)=>
		@a = a;
	print()=>
		print(@a);
	async test()=> {
		@print();
		for (i in 1::10)
			yield i;
	}
}

a = Example();
b = Example(15);

-- local class --

local class ExampleLocal {

}

-- extension class --

class ExampleToo extends Example {
	__init(a, b = 10)=>
		@a, @b = a, b;
	print()->
		print(@b);
}

c = ExampleToo();
c:print(); -- @b
Example.print(c);

-- superinitialization --

class ExampleThree extends ExampleToo {
	__init(a, b)=>
		self.__super.__init(self, a, b);
}

-- interface

interface X {}

local interface IScope {
	close;
}

-- implementation of interface

class IO implements IScope {
	close()=> {
		if (! @closed)
			@closed = true;
		else
			return;
		@file:close();
	}
}

-- extension of implemented interface, inherits close()

local class File extends IO implements IScope {
	__new(...)=>
		@file = io.open(...);
}
