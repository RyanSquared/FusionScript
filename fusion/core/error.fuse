local _error(errorObject)-> {
    if (errorObject) {
        local errorMessage = tostring(errorObject);
        if (errorMessage)
            error(errorMessage);
        else
            error("error();");
    } else
        error("error();");
}

local _assert(test, errorObject, ...)-> {
    if (test)
        return test, errorObject, ...;
    else if errorObject
        error(errorObject);
    else
        error("assert failed: %s" % test);
}

local _type(input, ...)-> {
    local types = {...};
    local _input_type = type(input);
    for (i=1, #types)
        if (input_type = types[i])
            return;
    _error(TypeError(table.concat(types, "/"), input));
}

new Error {
    __tostring()=>
        return "%s: %q" % {@__name, @error || "Unidentified Error"};
    __new(error_message)=>
        @error = error_message;
}

new TypeError extends Error {
    __tostring()=>
        return "%s: Expected %s, got %s <%q>" % {@__name,
            @expected,
            type(@actual),
            @actual};
    __new(expected, actual)=>
        @expected, @actual = expected, actual;
}

return {
    error = _error,
    assert = _assert,
    type = _type,
    Error = Error,
    TypeError = TypeError
};