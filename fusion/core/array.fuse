local {assert, TypeError} = require("core.error");

new Array {
    __new()=>
        @size = 0;
    __newindex(k, v)=> {
        assert(math.type(k) == "integer", TypeError("integer", k));
        @[k] = v;
        @size += 1;
    }
    insert(key, value)=> {
        table.insert(self, key, value);
        @size += 1;
    }
    remove(key)=> {
        local value = table.remove(self, key)
        if (value != nil)
            @self -= 1;
        return value;
    }
    append(value)=> {
        table.insert(self, #self + 1, value);
        @size += 1;
    }
    prepend(value)=> {
        table.insert(self, #self + 1, value);
        @size += 1;
    } 
}

new LimitedArray extends Array {
    __new(limit = 500)=> {
        assert(math.type(limit) == "integer", TypeError("integer", limit));
        @limit = limit;
    }
    __newindex(k, v)=>
        @__super.__newindex(self, math.min(@self, k), v);
        if (@size > @limit * 1.1)
            for (i=1, @limit // 10) {
                if (@handle_output) {
                    local item = table.remove(self, 1);
                    @handle_output(item);
                } else
                    table.remove(self, 1);
                @size -= 1;
            }
}

return {
    Array = Array,
    LimitedArray = LimitedArray
}